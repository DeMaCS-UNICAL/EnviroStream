#show too_high_pm10/1.
#show too_high_pm2_5/1.
#show most_polluted_area_pm10/1.
#show most_polluted_area_pm2_5/1.
#show number_of_high_detections/2.
#show noise_pollution/1.
#show disconfort/2.
#show humidex_level/2.
#show always_high_humidex/2.
#show humidex_level/2.
#show light_rain/1.
#show moderate_rain/1.
#show heavy_rain/1.
#show least_rainy_city/1.
#show wind_alert/1.
#show beaufort_level/2.
#show beaufort_level/2.
#show duration/3.

station("Weather Station WS01").
station("Weather Station WS02").
maximum_allowed_pm10(50).
maximum_allowed_pm2_5(25).
day_threshold(65).
night_threshold(55).
threshold_1_hour(85).
light_rain_threshold(25).
heavy_rain_threshold(76).

last_pm10(C,X) :- pm10(C,X) in [10 min].
tot_pm10(C,Tot) :- station(C), #sum{X,C: last_pm10(C,X)} = Tot.
count_pm10(C,Count) :- station(C), #count{X,C: last_pm10(C,X)} = Count.
avg_pm10(C,Avg) :- tot_pm10(C,Tot), count_pm10(C,Count), Avg = Tot/Count
too_high_pm10(C) :- avg_pm10(C,A), A>=X, maximum_allowed_pm10(X).
last_pm2_5(C,X) :- pm2_5(C,X) in [10 min].
tot_pm2_5(C,Tot) :- station(C), #sum{X,C: last_pm2_5(C,X)} = Tot.
count_pm2_5(C,Count) :- station(C), #count\{X,C: last_pm2_5(C,X)} = Count.
avg_pm2_5(C,Avg) :- tot_pm2_5(C,Tot), count_pm2_5(C,Count), Avg = Tot/Count
too_high_pm2_5(C) :- avg_pm2_5(C,A), A>=X, maximum_allowed_pm2_5(X).
max_avg_pm10(MAX) :- MAX = #max{X: avg_last_pm10(Area, X)}.
most_polluted_area_pm10(C) :- avg_last_pm10(C,MAX), max_avg_pm10(MAX).
max_avg_pm2_5(MAX) :- MAX = #max{X: avg_last_pm2_5(Area, X)}.
most_polluted_area_pm2_5(C) :- avg_last_pm2_5(C,MAX), max_avg_pm2_5(MAX).

day :- @now.hour>=6, @now.hour<22. 
night :- not day. 
above_threshold(C) :- noise(C, Noise), day_threshold(T), day, &geq(Noise,T;). 
above_threshold(C) :- noise(C, Noise), night_threshold(T), night, &geq(Noise,T;). 
number_of_high_detections(C,X) :- above_threshold(C) count X in [60 min].
high_detections(C) :- number_of_high_detections(C,X), X>0.
number_of_high_detections(C,0) :- station(C), not high_detections(C).
above_threshold_1_h(C) :- noise(C, N), threshold_1_hour(T), &geq(N,T;).
noise(C) :- noise(C, N).
above_threshold_1_h(C) :- above_threshold_1_h(C) in {1}, not noise(C).
noise_pollution(C) :- above_threshold_1_h(C) always in [60 min].

humidex(C, Hi) :- temperature(C, T), humidity(C, H), &compute_humidex(T, H; Hi).
humidex_level(C,1) :- humidex(C,Hi), Hi>=20, Hi<30.
humidex_level(C,2) :- humidex(C,Hi), Hi>=30, Hi<40.
humidex_level(C,3) :- humidex(C,Hi), Hi>=40, Hi<45.
humidex_level(C,4) :- humidex(C,Hi), Hi>=45.
disconfort(C,L) :- humidex_level(C, L), L>2, humidex_level(C, L) at least 3 in [30 min].
temperature(C):- temperature(C, Temperature).
humidex_level(C, Level) :- humidex_level(C, Level) in {1}, not temperature(C).
always_high_humidex(C,L) :- humidex_level(C, L), L>2, humidex_level(C, L) always in [30 min].

rain_now(C,Rain,@now) :- rain(C, Rain).
rain_1_hour(C, Rain, X) :- rain_now(C, Rain, X) in [60 min].
precedes(S,T1,T2) :- rain_1_hour(S,R1,T1), rain_1_hour(S,R2,T2), T1<T2.
successor(S,X,Y) :- precedes(S,X,Y), not inBetween(S,X,Y).
inBetween(S,X,Y) :- precedes(S,X,Z), precedes(S,Z,Y).
first(S,T) :- rain_1_hour(S,R,T), not hasPredecessor(S,T).
last(S,T) :- rain_1_hour(S,R,T), not hasSuccessor(S,T).
hasPredecessor(S,X) :- successor(S,Y,X).
hasSuccessor(S,Y) :- successor(S,Y,X).
partialSum(S,T,R) :- first(S,T), rain_1_hour(S,R,T). 
partialSum(S,T2,R3) :- successor(S,T1,T2), rain_1_hour(S,R2,T2), partialSum(S,T1,PS), &sum(PS,R2;R3).
mm_rain_1_hour(S,R) :- last(S,T), partialSum(S,T,R).
light_rain(C) :- mm_rain_1_hour(C, T), &leq(T,LTh;), light_rain_threshold(LTh), &gt(T,0;).
moderate_rain(C) :- mm_rain_1_hour(C, T), light_rain_threshold(LTh), heavy_rain_threshold(HTh), &gt(T,LTh;), &leq(T,HTh;).
heavy_rain(C) :- mm_rain_1_hour(C, T), heavy_rain_threshold(HTh), &gt(T,HTh;).
precedes_rain(M1,M2) :- mm_rain_1_hour(S1,M1), mm_rain_1_hour(S2,M2), S1!=S2, &lt(M1,M2;).
successor_rain(X,Y) :- precedes_rain(X,Y), not inBetween_rain(X,Y).
inBetween_rain(X,Y) :- precedes_rain(X,Z), precedes_rain(Z,Y).
min_mm_rain_1_hour(M) :- mm_rain_1_hour(S,M), not hasPredecessor_rain(M).
hasPredecessor_rain(X) :- successor_rain(Y,X).
least_rainy_city(Sensor) :- mm_rain_1_hour(Sensor, MIN), min_mm_rain_1_hour(MIN).

wind_now(C,Wind,@now) :- wind_speed(C, Wind).
wind_10_min(C, Wind, X) :- wind_now(C, Wind, X) in [10 min].
precedes_wind(S,T1,T2) :- wind_10_min(S,R1,T1), wind_10_min(S,R2,T2), T1<T2.
successor_wind(S,X,Y) :- precedes_wind(S,X,Y), not inBetween_wind(S,X,Y).
inBetween_wind(S,X,Y) :- precedes_wind(S,X,Z), precedes_wind(S,Z,Y).
first_wind(S,T) :- wind_10_min(S,W,T), not hasPredecessor_wind(S,T).
last_wind(S,T) :- wind_10_min(S,W,T), not hasSuccessor_wind(S,T).
hasPredecessor_wind(S,X) :- successor_wind(S,Y,X).
hasSuccessor_wind(S,Y) :- successor_wind(S,Y,X).
partialSum_wind(S,T,W) :- first_wind(S,T), wind_10_min(S,W,T). 
partialSum_wind(S,T2,W3) :- successor_wind(S,T1,T2), wind_10_min(S,W2,T2), partialSum_wind(S,T1,PS), &sum(PS,W2;W3).
tot_wind_speed(S,W) :- last_wind(S,T), partialSum_wind(S,T,W).
count_wind_speed(C,C) :- station(C), #count{T: wind_10_min(C,W,T)} = C.
avg_wind_speed(C, Avg) :- &div(T,C;Avg), tot_wind_speed(C,T), count_wind_speed(C,C).
beaufort_level(C, L) :- avg_wind_speed(C, Speed), &beaufort_scale(Speed; L).
wind_alert(C) :- beaufort_level(C, L), L>=7.
duration(C,XNext,DNext,@now,L) :- duration(C,X1,D1,T1,L) in {1}, D=@now-T1, DNext=D1+D, XNext=X1+1, beaufort_level(C,L), beaufort_level(C,L) in {1}.
duration(C,1,1,@now,L1) :- beaufort_level(C,L1), beaufort_level(C,L2) in {1}, L1!=L2.
computed_beaufort_level(C) :- beaufort_level(C,_) in {1}.
duration(C,1,1,@now,X) :- beaufort_level(C,X), not computed_beaufort_level(C).
duration(C,D,L) :- duration(C,_,D,_,L), beaufort_level(C,L).

